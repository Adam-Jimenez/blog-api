/**
 * pagination middleware modifies the res send function
 * to format the data with a pagination convention before sending it
 *
 * res.json calls res.send, so it can also be used
 *
 */
const _ = require('lodash')

// TODO: sort by date, fix page query param
module.exports = (numberOfElementsPerPage = 5) => {
    return (req, res, next) => {
        const oldSend = res.send
        const pageNumber = parseInt(req.query.page) || 0 // page defaults to 0 if not specified (zero-indexed)

        res.send = function (data) {
            const parsedData = JSON.parse(data)
            const formattedData = formatData(parsedData, pageNumber, numberOfElementsPerPage)
            res.send = oldSend
            res.send(formattedData)
        }

        next()
    }
}

function formatData(data, pageNumber, numberOfElementsPerPage) {
    if (!_.isArray(data)) {
        throw new Error('Data must be array-like to support pagination')
    }

    if (!_.isFinite(pageNumber) || !_.isFinite(numberOfElementsPerPage) || pageNumber < 0 || numberOfElementsPerPage < 0) {
        throw new Error('Page number must be a finite and positive number')
    }

    const totalNumberOfPages = Math.ceil(data.length / numberOfElementsPerPage)

    if (pageNumber > totalNumberOfPages) {
        throw new Error('Page number is higher than total number of pages')
    }

    const strippedData = data.slice(pageNumber * numberOfElementsPerPage, (pageNumber + 1) * numberOfElementsPerPage)

    const formattedData = {
        page: pageNumber,
        data: strippedData,
        totalNumberOfPages: totalNumberOfPages
    }

    return formattedData
}
