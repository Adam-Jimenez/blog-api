/**
 * pagination fetches and formats the data with a pagination convention before sending it
 *
 */
const _ = require('lodash')
const db = require('db')
const Promise = require('bluebird')
const errors = require('errors')

module.exports = (req, res, next) => {
    const pageNumber = parseInt(req.query.page) || 0 // page defaults to 0 if not specified (zero-indexed)

    // inject new sendWithPagination function that handles pagination automagically for a given database model
    res.sendWithPagination = function (model, numberOfElementsPerPage = 5) {
        buildPage(model, pageNumber, numberOfElementsPerPage)
        .then((formattedData) => {
            res.send(formattedData)
        })
        .catch(errors.handleRestError(req, res))
    }

    next()
}

/**
 * validate query,
 * fetches data from database according to the queried page
 * and prepares it to be sent to the client by formatting it
 * TODO: seperation of concerns
 *
 * model : database model to query
 * page number, page number * numberOfElementsPerPage = offset (skip) for db
 * numberOfElementsPerPage = limit for db
 */
function buildPage(model, pageNumber, numberOfElementsPerPage) {
    if (!_.isFinite(pageNumber) || !_.isFinite(numberOfElementsPerPage) || pageNumber < 0 || numberOfElementsPerPage < 0) {
        throw new TypeError('Page number must be a finite and positive number')
    }

    return Promise.all([
        db[model].findAll({
            order: '`created_at` DESC',
            offset: pageNumber * numberOfElementsPerPage,
            limit: numberOfElementsPerPage
        }),
        db[model].count()
    ])
    .spread((data, count) => {

        if (!_.isArray(data)) {
            throw new InternalError('Data must be array-like to support pagination')
        }

        const totalNumberOfPages = Math.ceil(count / numberOfElementsPerPage)

        if (pageNumber > totalNumberOfPages) {
            throw new RangeError('Page number is higher than total number of pages')
        }

        return {
            page: pageNumber,
            data: data,
            totalNumberOfPages: totalNumberOfPages
        }
    })
}
